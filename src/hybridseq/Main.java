package hybridseq;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintWriter;

import org.biojavax.bio.phylo.io.nexus.NexusComment;
import org.biojavax.bio.phylo.io.nexus.NexusFile;
import org.biojavax.bio.phylo.io.nexus.NexusFileFormat;

import biojavaExtensions.NexusUtils;


public class Main {
	/**
	 * @param args
	 */
	public static void main(String[] args) {
		// Set up output stream
		PrintWriter stdout = new PrintWriter(System.out,true); // true -> autoflush
		
		// Read parameters from command line and input Nexus file, and initialize generator
		MainConfiguration cfg = new MainConfiguration(args,stdout);
		HybridNetworkGenerator gen = new HybridNetworkGenerator(cfg.params);
		
		// prefixComments will eventually be passed to nexus file output method
		NexusComment[] prefixComments = new NexusComment[2];
		// Display and add to file some versioning information.
		// All added comments must contain the string 'HybridSim' to avoid duplication if output file is subsequently used as input.
		stdout.println("HybridSim: uses PAL 1.5.1, BioJava 1.8.4 and jgrapht 0.9.0 libraries.");
		prefixComments[0]=NexusUtils.newNexusComment("This file was generated by, and can be used as input to, HybridSim");
		String palVersion = pal.util.Version.getVersionString();
		// getVersionString only works if our PAL source was extracted under CVS version control.
		if (palVersion.equals("unknown")) palVersion = "1.5.1"; 
		// I haven't found a way to interrogate BioJava or jgrapht for their version.
		prefixComments[1]=NexusUtils.newNexusComment(String.format("Versions: HybridSim %s, PAL %s, BioJava 1.8.4, jgrapht 0.9.0",Version.VERSION,palVersion));

		// Generate a hybrid network from the given parameters:
		HybridNetwork net = gen.generateNetwork(cfg.params.minReticEvents, cfg.params.reduceReticEventsTo);
		// Display a few stats to stdout:
		net.printSummary(stdout);

		// Generate the sets of random trees and use them to create output Nexus file
		HybridForests forests = new HybridForests(net,cfg.params);
		NexusFile outputNexusFile = forests.makeNexusFile(cfg.nexusFile, prefixComments);

		/*
		 * Write the output nexus file
		 */
		try {
			OutputStream out = new FileOutputStream(cfg.outputFile);
			NexusFileFormat.writeStream(out, outputNexusFile);
			out.close();
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
}
